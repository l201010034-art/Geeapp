
import { Loader } from './intelligent-loader.js'; // <-- A√ëADE ESTA L√çNEA


// --- 1. CONEXI√ìN CON LA IA PARA AN√ÅLISIS (PANELES DERECHOS) ---

const AI_API_URL = '/api/analyze';
const aiPanel = document.getElementById('ai-analysis-panel');
const aiSummaryDiv = document.getElementById('ai-summary');
const aiActionsContainer = document.getElementById('ai-actions-container');
const commandForm = document.getElementById('ai-command-form');
const commandBar = document.getElementById('ai-command-bar');
let lastLabResult = null;

// A√ëADE esta nueva funci√≥n.
function resetAiPanel() {
    aiPanel.classList.remove('hidden');
    aiSummaryDiv.innerHTML = '<p class="text-gray-400 animate-pulse">Analizando datos...</p>';
    aiActionsContainer.classList.add('hidden');
}

// --- CORRECCI√ìN CLAVE: Se elimina 'window.' de las declaraciones de funci√≥n ---
async function generateAiAnalysis(data) {
    if (!data.stats && !data.chartData) return;
    aiPanel.classList.remove('hidden');
    aiSummaryDiv.innerHTML = '<p class="text-gray-400 animate-pulse">Analizando datos...</p>';
    aiActionsContainer.classList.add('hidden');
    const prompt = buildPrompt(data);
    await callAndDisplayAnalysis(prompt);
}

async function generatePrediction(chartData) {
    aiPanel.classList.remove('hidden');
    aiSummaryDiv.innerHTML = '<p class="text-gray-400 animate-pulse">Generando pron√≥stico...</p>';
    aiActionsContainer.classList.add('hidden');
    const prompt = buildPredictionPrompt(chartData);
    await callAndDisplayAnalysis(prompt);
}

async function generateFireRiskAnalysis(data) {
    aiPanel.classList.remove('hidden');
    aiSummaryDiv.innerHTML = '<p class="text-gray-400 animate-pulse">Interpretando mapa de riesgo...</p>';
    aiActionsContainer.classList.add('hidden');
    const prompt = buildFireRiskPrompt(data);
    await callAndDisplayAnalysis(prompt);
}

async function callAndDisplayAnalysis(prompt) {
    try {
        const response = await fetch(AI_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ prompt }),
        });
        if (!response.ok) throw new Error(`Error en la API: ${response.statusText}`);
        const result = await response.json();
        aiSummaryDiv.innerHTML = markdownToHtml(result.analysisText);
        if (result.analysisText) aiActionsContainer.classList.remove('hidden');
    } catch (error) {
        console.error("Error al generar an√°lisis con IA:", error);
        aiSummaryDiv.innerHTML = `<p class="text-red-400">Ocurri√≥ un error: ${error.message}</p>`;
    }
}

// --- 2. L√ìGICA DE LA INTERFAZ CONVERSACIONAL (BARRA SUPERIOR) ---
commandForm.addEventListener('submit', async (event) => {
    event.preventDefault(); 
    const userQuery = commandBar.value;
    if (!userQuery) return;
    
    commandBar.disabled = true;
    commandBar.placeholder = "Procesando...";
    
    // ‚ñº‚ñº‚ñº L√çNEAS NUEVAS ‚ñº‚ñº‚ñº
    // Mostramos el loader inmediatamente con mensajes espec√≠ficos para este proceso.
    Loader.show([
        "Interpretando tu comando...",
        "Conectando con el modelo de IA Gemini...",
        "Traduciendo lenguaje natural a par√°metros...",
        "Configurando el an√°lisis solicitado..."
    ]);
    
    try {
        const prompt = buildConversationalPrompt(userQuery);
        const response = await fetch(AI_API_URL, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ prompt }) });
        const result = await response.json();
        const jsonMatch = result.analysisText.match(/\{[\s\S]*\}/);
        if (!jsonMatch) throw new Error("La IA no devolvi√≥ un JSON v√°lido.");
        
        const params = JSON.parse(jsonMatch[0]);
        if (params.error) throw new Error(params.error);
        
        document.getElementById('startDate').value = params.startDate;
        document.getElementById('endDate').value = params.endDate;
        document.getElementById('variableSelector').value = params.variable;

        window.clearZoneCheckboxes();
        if (window.drawnItems) window.drawnItems.clearLayers();

        if (params.zona_type === 'predefinida') {
            const checkbox = window.zonaCheckboxes[params.zona_name];
            if(checkbox) {
                checkbox.checked = true;
                window.handleZoneSelection(params.zona_name);
                window.handleAnalysis('general');
            } else {
                throw new Error(`Zona predefinida '${params.zona_name}' no encontrada.`);
            }
        } else if (params.zona_type === 'municipio') {
            const municipioRoi = { name: params.zona_name, zona_type: 'municipio', zona_name: params.zona_name };
            window.handleAnalysis('general', municipioRoi);
        }
    } catch (error) {
        console.error("Error al procesar el comando de IA:", error);
        commandBar.value = `Error: ${error.message}`;
        Loader.hide(); // <-- A√ëADE ESTA L√çNEA para ocultar el loader si hay un error
    } finally {
        commandBar.disabled = false;
        commandBar.placeholder = "Ej: Lluvia en Chin√° el mes pasado...";
        if (window.innerWidth < 768) commandBar.blur();
    }
});


// UBICACI√ìN: ai-connector.js
// REEMPLAZA la funci√≥n handleLabExecution completa con esta versi√≥n.
async function handleLabExecution() {
    const labOverlay = document.getElementById('lab-overlay');
    const executeButton = document.getElementById('lab-execute-button');

    const analysisType = document.getElementById('lab-analysis-type').value;
    let requestBody;

    try { // --- Se mueve el try/catch para envolver toda la l√≥gica ---
        if (analysisType === 'HURRICANE') {
            const hurricaneSelector = document.getElementById('lab-hurricane-selector');
            if (!hurricaneSelector.value || hurricaneSelector.options[hurricaneSelector.selectedIndex].text === 'No se encontraron huracanes') {
                // Usamos el sistema de errores de Geo para notificaciones amigables.
                window.reportErrorToGeo("Por favor, busca y selecciona un hurac√°n v√°lido.", "Aviso: ");
                return; // Detenemos la ejecuci√≥n
            }
            requestBody = {
                analysisType: 'HURRICANE',
                hurricaneSid: hurricaneSelector.value,
                hurricaneName: hurricaneSelector.options[hurricaneSelector.selectedIndex].text,
                year: document.getElementById('lab-hurricane-year').value
            };
        } else {
            const regionSelector = document.getElementById('lab-region-selector-municipalities');
            const marineRegionSelector = document.getElementById('lab-region-selector-marine');
            const regionName = !regionSelector.classList.contains('hidden') ? regionSelector.value : marineRegionSelector.value;
            
            requestBody = {
                analysisType: analysisType,
                roi: regionName,
                startDate: document.getElementById('lab-start-date').value,
                endDate: document.getElementById('lab-end-date').value
            };
        }

        executeButton.disabled = true;
        Loader.show([
            "Accediendo al Laboratorio de IA...",
            "Configurando el entorno de an√°lisis en el servidor...",
            "Ejecutando el m√≥dulo de an√°lisis especializado...",
            "Compilando resultados para la previsualizaci√≥n...",
            "Refinando contenido con IA avanzada...",
            "¬°An√°lisis completado!"
        ]);
        
        const response = await fetch('/api/gee-lab', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            const errorData = await response.json();
            // Si la respuesta del servidor no es OK, lanzamos un error para ser atrapado por el CATCH.
            throw new Error(errorData.details || "Error al ejecutar el an√°lisis.");
        }

        lastLabResult = await response.json();
        console.log('[DEBUG 1/4] Respuesta del Servidor:', lastLabResult);


        labOverlay.classList.add('hidden');
        applyLabResultToMap(requestBody); 
    
    } catch (error) {
        // 1. Reportamos el error a GeoBot PRIMERO.
        window.reportErrorToGeo(error.message, "¬°Ups! El an√°lisis del laboratorio no pudo completarse. ");
        
        // 2. DESPU√âS, ocultamos el loader.
        Loader.hide();
        
        // --- ‚ñº‚ñº‚ñº L√çNEA A√ëADIDA ‚ñº‚ñº‚ñº ---
        // 3. Finalmente, cerramos la ventana del Laboratorio.
        labOverlay.classList.add('hidden');

    } finally {
        // Esto se ejecuta siempre, asegurando que el bot√≥n se reactive.
        executeButton.disabled = false;
        executeButton.textContent = "üöÄ Ejecutar An√°lisis";
    }
}

// UBICACI√ìN: /ai-connector.js
// REEMPLAZA la funci√≥n applyLabResultToMap completa.

function applyLabResultToMap(requestBody) {
    if (lastLabResult) {
        if (lastLabResult.mapId) window.addGeeLayer(lastLabResult.mapId.urlFormat, 'Resultado del Laboratorio');
        
        if (window.legendControl && lastLabResult.visParams) window.legendControl.update(lastLabResult.visParams);
        
        let hasValidData = false;
        if (lastLabResult.stats && !lastLabResult.stats.includes("No se pudieron calcular")) {
            hasValidData = true;
        }
        if (lastLabResult.chartData && lastLabResult.chartData.length > 1) {
            hasValidData = true;
        }

        if (hasValidData) {
            window.updateStatsPanel(lastLabResult.stats);
            if (lastLabResult.chartData && lastLabResult.chartData.length > 1) {
                window.updateChartAndData(lastLabResult.chartData, lastLabResult.chartOptions);
            }
            // ‚ñº‚ñº‚ñº NUEVA L√ìGICA A√ëADIDA ‚ñº‚ñº‚ñº
            // Obtenemos el nombre legible del an√°lisis y los par√°metros de la solicitud.
            const analysisName = document.getElementById('lab-analysis-type').selectedOptions[0].text;
            const prompt = buildLabAnalysisPrompt(lastLabResult, analysisName, requestBody.roi, requestBody.startDate, requestBody.endDate);
            
            // Llamamos a la misma funci√≥n que usan los an√°lisis generales para mostrar la interpretaci√≥n.
            callAndDisplayAnalysis(prompt);
            // ‚ñ≤‚ñ≤‚ñ≤ FIN DE LA NUEVA L√ìGICA ‚ñ≤‚ñ≤‚ñ≤
        } else {
            window.clearChartAndAi();
            // Opcional: Informar al usuario si no hay datos para analizar.
            aiPanel.classList.remove('hidden');
            aiSummaryDiv.innerHTML = `<p class="text-gray-400">No se encontraron datos suficientes en la regi√≥n y fechas seleccionadas para generar un an√°lisis de IA.</p>`;
        }
    }
}

async function fetchHurricaneList() {
    const year = document.getElementById('lab-hurricane-year').value;
    const selector = document.getElementById('lab-hurricane-selector');
    const selectorContainer = document.getElementById('lab-hurricane-selector-container');
    const fetchButton = document.getElementById('lab-fetch-hurricanes-button');

    if (!year) {
        alert("Por favor, introduce un a√±o.");
        return;
    }
    selector.innerHTML = '<option>Cargando...</option>';
    selectorContainer.classList.remove('hidden');
    fetchButton.disabled = true;
    fetchButton.textContent = "Buscando...";

    try {
        const response = await fetch('/api/gee', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ action: 'getHurricaneList', params: { year: parseInt(year) } })
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.details || "Error al contactar el servidor.");
        }
        const { hurricaneList } = await response.json();
        selector.innerHTML = '';
        if (hurricaneList && hurricaneList.length > 0) {
            hurricaneList.forEach(storm => {
                const option = document.createElement('option');
                option.value = storm.sid;
                option.textContent = storm.name;
                selector.appendChild(option);
            });
        } else {
             selector.innerHTML = `<option>No se encontraron huracanes</option>`;
        }
    } catch (error) {
        console.error("Error al buscar huracanes:", error);
        selector.innerHTML = `<option>Error: ${error.message}</option>`;
    } finally {
        fetchButton.disabled = false;
        fetchButton.textContent = "1. Buscar Huracanes";
    }
}


// --- 4. CONSTRUCCI√ìN DE PROMPTS PARA LA IA ---
function markdownToHtml(text) {
    return text?.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').split('\n\n').map(p => `<p>${p.replace(/\n/g, '<br>')}</p>`).join('').replace(/<p>\*/g, '<ul>*').replace(/\* (.*?)(<br>|<\/p>)/g, '<li>$1</li>').replace(/<\/li><\/ul><\/p>/g, '</li></ul>');
}

function buildPrompt(data) {
    const { stats, chartData, variable, roi, startDate, endDate } = data;
    const chartSample = chartData ? `Los primeros 5 puntos de datos son: ${JSON.stringify(chartData.slice(0, 6))}` : "No hay datos de serie temporal.";
    return `Eres un climat√≥logo experto en Campeche. Analiza los siguientes datos para un informe gubernamental. **Variable:** ${variable}. **Zona:** ${roi}. **Periodo:** ${startDate} a ${endDate}. **Estad√≠sticas:** ${stats || "N/A"}. **Muestra de datos:** ${chartSample}. **Instrucciones:** Genera un resumen ejecutivo conciso (m√°x 3 p√°rrafos). Enf√≥cate en tendencias e implicaciones pr√°cticas para Protecci√≥n Civil, Desarrollo Agropecuario y **SEDECO**. Finaliza con una **Conclusi√≥n Clave** en negritas. Responde en texto simple.`;
}

function buildConversationalPrompt(query) {
    const today = new Date().toISOString().split('T')[0];
    const municipios = "Calakmul, Calkin√≠, Campeche, Candelaria, Carmen, Champot√≥n, Dzitbalch√©, Esc√°rcega, Hecelchak√°n, Hopelch√©n, Palizada, Seybaplaya, Tenabo";
    return `Tu tarea es traducir la petici√≥n a JSON para una plataforma clim√°tica de Campeche. Hoy es ${today}. Extrae: startDate, endDate, variable, zona_type, zona_name. **Variables:** "Temperatura del Aire (¬∞C)", "Humedad Relativa (%)", "Precipitaci√≥n Acumulada (mm)", "Temp. Superficial (LST ¬∞C)", "Evapotranspiraci√≥n (mm/8 d√≠as)". **Zonas Predefinidas:** "Todo el Estado", "Zona 1, Ciudad Campeche", "Zona 2, Lerma", "Zona 3, Chin√°", "Zona 4, San Fco. Campeche". **Municipios:** ${municipios}. **Reglas:** 1. Responde solo con el JSON. 2. 'zona_type' debe ser 'predefinida' o 'municipio'. Usa nombres exactos con acentos. 3. Si no se menciona zona, usa "Todo el Estado". 4. Infiere la variable (ej. "calor" -> "Temperatura del Aire (¬∞C)"). 5. Si la petici√≥n no es sobre clima/geograf√≠a de Campeche, responde con '{"error": "Petici√≥n fuera de alcance"}'. **Petici√≥n:** "${query}"`;
}

function buildPredictionPrompt(chartData) {
    const variableName = chartData[0][1];
    const dataOnly = chartData.slice(1);
    const recentDataSample = JSON.stringify(dataOnly.slice(-15));
    return `
        Eres un climat√≥logo experto en an√°lisis de datos y modelado de tendencias para el estado de Campeche.
        Tu tarea es analizar la siguiente serie temporal de datos clim√°ticos y generar un pron√≥stico cualitativo a corto plazo (pr√≥ximas 2-4 semanas).
        **Datos de la Serie Temporal Reciente:**
        - **Variable:** ${variableName}
        - **√öltimos 15 puntos de datos:** ${recentDataSample}
        **Instrucciones para tu respuesta:**
        1.  **An√°lisis de Tendencia:** Describe brevemente la tendencia observada en los datos m√°s recientes.
        2.  **Pron√≥stico a Corto Plazo:** Basado en esta tendencia y en tu conocimiento del clima de Campeche, proyecta c√≥mo es probable que se comporte esta variable en las pr√≥ximas 2 a 4 semanas.
        3.  **Implicaciones y Recomendaciones:** ¬øQu√© significa este pron√≥stico para los sectores clave?
            - **Si la tendencia es negativa:** Advierte sobre los riesgos y sugiere acciones preventivas para Protecci√≥n Civil y la Secretar√≠a de Desarrollo Agropecuario.
            - **Si la tendencia es positiva:** Describe las condiciones favorables.
            - **Si la tendencia es extrema:** Advierte sobre posibles riesgos de inundaciones.
        **Formato de Salida:**
        Usa formato Markdown. Inicia con un titular claro como "**Pron√≥stico de Tendencia**". Usa negritas para resaltar los puntos clave.
    `;
}

function buildFireRiskPrompt(data) {
    const { roi, startDate, endDate } = data;
    return `Eres un analista de riesgos para el gobierno de Campeche. Interpreta un mapa de "Riesgo de Incendio Promedio" para **${roi}** del **${startDate}** al **${endDate}**. La leyenda es: Verde (Bajo), Amarillo (Moderado), Naranja (Alto), Rojo (Extremo). **Instrucciones:** 1. Titula "Interpretaci√≥n del Mapa de Riesgo de Incendio". 2. Explica qu√© implica ver manchas naranjas/rojas en zonas agr√≠colas o forestales. 3. Da recomendaciones accionables para SEPROCI (monitoreo, alertas), Desarrollo Agropecuario y **SEDECO** (impacto econ√≥mico). Usa Markdown.`;
}

export {
    generateAiAnalysis,
    generatePrediction,
    generateFireRiskAnalysis,
    handleLabExecution,
    applyLabResultToMap,
    fetchHurricaneList,
    resetAiPanel // <-- A√ëADE ESTA L√çNEA

};

// UBICACI√ìN: /ai-connector.js
// A√ëADE esta funci√≥n al final del archivo.

function buildLabAnalysisPrompt(labResult, analysisType, roi, startDate, endDate) {
    const { stats } = labResult;
    return `
        Eres un analista geoespacial experto. Interpreta el resultado de un an√°lisis avanzado del "Laboratorio de IA".
        - **Tipo de An√°lisis:** ${analysisType}
        - **Regi√≥n de Inter√©s:** ${roi}
        - **Periodo:** ${startDate} a ${endDate}
        - **Estad√≠sticas Clave:** ${stats || "No se generaron estad√≠sticas num√©ricas, es un an√°lisis visual."}

        **Instrucciones:**
        1.  Explica en un p√°rrafo qu√© es este tipo de an√°lisis y para qu√© sirve (ej. "El NDVI mide la salud de la vegetaci√≥n...").
        2.  Basado en las estad√≠sticas y tu conocimiento del an√°lisis, genera un resumen ejecutivo conciso (m√°x 2 p√°rrafos).
        3.  Finaliza con una **Conclusi√≥n Clave** en negritas sobre lo que los resultados implican para la regi√≥n.
        **Formato de Salida:** Usa formato Markdown simple (p√°rrafos y **negritas**).
    `;
}